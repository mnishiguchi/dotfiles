#!/bin/bash

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

if [ -f /etc/bashrc ]; then
  . /etc/bashrc
fi

## Helpers

say() {
  echo "bashrc: $1"
}

say_err() {
  say "$1" >&2
}

err() {
  say_err "ERROR $1"
  exit 1
}

command_exists() { command -v "$1" &>/dev/null; }

# Find the first available command
find_first_command() {
  local cmd=""
  for candidate in "$@"; do
    if command_exists "$candidate"; then
      cmd="$candidate"
      break
    fi
  done
  echo "$cmd"
}

## Common variables

source "$HOME/.config/shell/variables"

# Bash-specific variables
export HISTCONTROL=erasedups:ignoredups:ignorespace
export HISTIGNORE="history:ls:pwd:cd:"
export HISTFILESIZE=10000
export HISTSIZE=10000
shopt -s histappend

## Git completion

# https://git-scm.com/book/en/v2/Appendix-A:-Git-in-Other-Environments-Git-in-Bash
mkdir -p "$XDG_CONFIG_HOME/git"
git_completion_script="$XDG_CONFIG_HOME/git/git-completion.bash"

if [ ! -f "$git_completion_script" ]; then
  curl -L https://raw.github.com/git/git/master/contrib/completion/git-completion.bash >"$git_completion_script"
fi

source "$git_completion_script"

## zoxide

# https://github.com/ajeetdsouza/zoxide
if command_exists zoxide; then
  eval "$(zoxide init bash)"
else
  say_err "zoxide is not installed."
fi

## asdf

export ASDF_DIR="$HOME/.asdf"

# https://asdf-vm.com/guide/getting-started.html
if [ -f "$ASDF_DIR/asdf.sh" ]; then
  source "$ASDF_DIR/asdf.sh"

  if [ -f "$ASDF_DIR/completions/asdf.bash" ]; then
    source "$ASDF_DIR/completions/asdf.bash"
  fi
fi

## direnv

# https://direnv.net/docs/hook.html
command_exists direnv && eval "$(direnv hook bash)"

## Shell prompt

# https://starship.rs/config/
export STARSHIP_CONFIG="$XDG_CONFIG_HOME/bash/starship.toml"

# https://starship.rs
if ! command_exists starship; then
  curl -sS https://starship.rs/install.sh | sh
fi

eval "$(starship init bash)"

## fuzzy finder

export FZF_DIR="$XDG_CONFIG_HOME/fzf"

# https://github.com/junegunn/fzf
# Source the fzf.bash script if available
if [[ -f "$FZF_DIR/fzf.bash" ]]; then
  source "$FZF_DIR/fzf.bash"
else
  say_err "fzf.bash not found in $FZF_DIR. Ensure fzf is properly installed."
fi

# https://github.com/junegunn/fzf/wiki/Color-schemes#dracula
export FZF_DEFAULT_OPTS='
--reverse
--color=dark
--color=fg:-1,bg:-1,hl:#5fff87,fg+:-1,bg+:-1,hl+:#ffaf5f
--color=info:#af87ff,prompt:#5fff87,pointer:#ff87d7,marker:#ff87d7,spinner:#ff87d7
'

# Default command to use when input is tty
# https://github.com/junegunn/fzf#environment-variables
if command_exists rg; then
  export FZF_DEFAULT_COMMAND="rg --files --hidden --max-filesize 1M --glob '!.git' --ignore-file '$XDG_CONFIG_HOME/git/excludes'"
else
  export FZF_DEFAULT_COMMAND="find . -type f ! -path '*git*'"
fi

## sdkman

# https://sdkman.io/install
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

## Common shell stuff

source "$XDG_CONFIG_HOME/shell/aliases"

## Editors

EDITOR=$(find_first_command nvim vim)
ELIXIR_EDITOR=$(find_first_command code nvim vim)
[ "$ELIXIR_EDITOR" = "code" ] && ELIXIR_EDITOR="$ELIXIR_EDITOR --goto"

## Wrapping up

# Clean up PATH
PATH=$(printf "%s" "$PATH" | awk -v RS=':' '!a[$1]++ { if (NR > 1) printf RS; printf $1 }')

pcall neofetch

## Bash Line Editor (ble.sh)

ble_config_dir="$XDG_CONFIG_HOME/blesh"
ble_data_dir="$XDG_DATA_HOME/blesh"
ble_script="$ble_data_dir/ble.sh"
ble_rc="$ble_config_dir/init.sh"

# https://github.com/akinomyoga/ble.sh#14-user-settings-blerc
if [[ -f "$ble_script" ]]; then
  if [ -z "$BLE_VERSION" ]; then
    say "loading ${ble_script}"
    source "$ble_script" --noattach
  else
    say "ble.sh already loaded"
  fi

  # Note: Be sure to attach or reload ble.sh at the end of .bashrc
  # https://github.com/akinomyoga/ble.sh
  if [ -z "$BLE_ATTACHED" ]; then
    say "attaching ble.sh ${BLE_VERSION}"
    ble-attach
  else
    say "ble.sh already attached -- reloading"
    ble-reload
  fi

else
  say_err "ble.sh is not installed or the required script ($ble_script) is missing."
fi
