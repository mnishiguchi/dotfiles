#!/bin/bash

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

if [ -f /etc/bashrc ]; then
  . /etc/bashrc
fi

## Helpers

say() {
  echo "bashrc: $1"
}

say_err() {
  say "$1" >&2
}

err() {
  say_err "ERROR $1"
  exit 1
}

command_exists() { command -v "$1" &>/dev/null; }

## Common variables

source "$HOME/.config/shell/variables"

# Bash-specific variables
export HISTCONTROL=erasedups:ignoredups:ignorespace
export HISTFILE="$XDG_STATE_HOME/bash/history"
export HISTIGNORE="history:ls:pwd:cd:"
export HISTFILESIZE=10000
export HISTSIZE=10000
shopt -s histappend

## Git completion

# https://git-scm.com/book/en/v2/Appendix-A:-Git-in-Other-Environments-Git-in-Bash
mkdir -p "$XDG_CONFIG_HOME/git"
git_completion_script="$XDG_CONFIG_HOME/git/git-completion.bash"

if [ ! -f "$git_completion_script" ]; then
  curl -L https://raw.github.com/git/git/master/contrib/completion/git-completion.bash >"$git_completion_script"
fi

source "$git_completion_script"

## zoxide

# https://github.com/ajeetdsouza/zoxide
if ! command_exists zoxide; then
  curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
fi

eval "$(zoxide init bash)"

## asdf

export ASDF_DIR="$XDG_CONFIG_HOME/asdf"
export ASDF_DATA_DIR="$XDG_DATA_HOME/asdf"

# https://asdf-vm.com/guide/getting-started.html
if [ -f "$ASDF_DIR/asdf.sh" ]; then
  source "$ASDF_DIR/asdf.sh"

  if [ -f "$ASDF_DIR/completions/asdf.bash" ]; then
    source "$ASDF_DIR/completions/asdf.bash"
  fi
fi

## direnv

# https://direnv.net/docs/hook.html
command_exists direnv && eval "$(direnv hook bash)"

## Shell prompt

# https://starship.rs/config/
export STARSHIP_CONFIG="$XDG_CONFIG_HOME/bash/starship.toml"

# https://starship.rs
if ! command_exists starship; then
  curl -sS https://starship.rs/install.sh | sh
fi

eval "$(starship init bash)"

## fuzzy finder

export FZF_DIR="$XDG_CONFIG_HOME/fzf"

# https://github.com/junegunn/fzf
if [[ ! -d "$FZF_DIR" ]]; then
  git clone --depth 1 https://github.com/junegunn/fzf.git "$FZF_DIR"
  "$FZF_DIR/install" --xdg
fi

source "$FZF_DIR/fzf.bash"

## Common shell stuff

source "$XDG_CONFIG_HOME/shell/aliases"

## Wrapping up

# Clean up PATH
PATH=$(printf "%s" "$PATH" | awk -v RS=':' '!a[$1]++ { if (NR > 1) printf RS; printf $1 }')

pcall neofetch

## Bash Line Editor (ble.sh)

ble_config_dir="$XDG_CONFIG_HOME/blesh"
ble_data_dir="$XDG_DATA_HOME/blesh"
ble_script="$ble_data_dir/ble.sh"
ble_rc="$ble_config_dir/init.sh"

# download ble.sh source code
if [ ! -d "$ble_config_dir" ]; then
  git clone --recursive --depth 1 --shallow-submodules https://github.com/akinomyoga/ble.sh.git "$ble_config_dir"
fi

# install ble.sh
if [ ! -d "$ble_data_dir" ]; then
  # install to $XDG_DATA_HOME/blesh
  make --directory "$ble_config_dir" install
fi

# https://github.com/akinomyoga/ble.sh#14-user-settings-blerc
if [ ! -f "$ble_rc" ]; then
  say "creating $ble_rc"

  cat <<EOF >"$ble_rc"
# https://github.com/akinomyoga/ble.sh/blob/master/blerc.template
# https://github.com/akinomyoga/blesh-contrib#option-2-setup-in-blerc

# fzf integration
ble-import -d integration/fzf-completion
ble-import -d integration/fzf-key-bindings

# disable the bell
bleopt edit_abell=
bleopt edit_vbell=

# the delay to start auto completion after the user made the last input
bleopt complete_auto_delay=300

# the timeout for the pathname expansions performed in auto-complete
bleopt complete_timeout_auto=500

# the maximum acceptable size of any data structure generated during the completion process
bleopt complete_limit=2000
bleopt complete_limit_auto=2000

# Disable highlighting based on filenames
bleopt highlight_filename=

# Disable highlighting based on variable types
bleopt highlight_variable=
EOF
  echo
  cat "$ble_rc"
  echo
fi

if [ -f "$ble_script" ]; then
  if [ -z "$BLE_VERSION" ]; then
    say "loading ${ble_script}"
    source "$ble_script" --noattach
  else
    say "ble.sh already loaded"
  fi

  # Note: Be sure to attach or reload ble.sh at the end of .bashrc
  # https://github.com/akinomyoga/ble.sh
  if [ -z "$BLE_ATTACHED" ]; then
    say "attaching ble.sh ${BLE_VERSION}"
    ble-attach
  else
    say "ble.sh already attached -- reloading"
    ble-reload
  fi
fi
