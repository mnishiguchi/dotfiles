#!/bin/bash

# ================================
# Utility Functions
# ================================

# Check if a command exists
command_exists() { command -v "$1" &>/dev/null; }

# Safely call a command, ignoring errors
pcall() { "$@" || true; }

# ================================
# Aliases for ls and Alternatives
# ================================

if command_exists eza; then
  # https://github.com/eza-community/eza
  alias ls='eza --group-directories-first --classify --time-style="+%Y-%m-%d %H:%M"'
  alias ll='ls --long'
  alias la='ls --long --all'
  alias lt='ls --long --time modified'
  alias lr='ls --recurse'
  alias l.='ls --long --list-dirs .*'
elif command_exists exa; then
  alias ls='exa --group-directories-first --classify'
  alias ll='ls --long'
  alias la='ls --long --all'
  alias lt='ls --long --time modified'
  alias lr='ls --recurse'
  alias l.='ls --long --list-dirs .*'
else
  alias ls='ls -Fh'
  alias ll='ls -l'
  alias la='ls -lA'
  alias lt='ls -lt'
  alias lr='ls -R'
  alias l.='ls -ld .*'
fi

# ================================
# Navigation Shortcuts
# ================================

alias ..='cd ../'
alias ...='cd ../../'

alias memo='cd "${VIMWIKI_DIR:-$HOME/Documents/vimwiki}"'

# ================================
# File Operation Enhancements
# ================================

alias cp='cp -iv'
alias grep='grep --color=always'
alias mv='mv -iv'
alias rm='rm -vI'
alias wget='wget --continue'

# ================================
# PATH Management
# ================================

# Display PATH as one entry per line
alias path='echo -e ${PATH//:/\\n}'

# ================================
# Cross-Platform `open` Command
# ================================

if ! command_exists open; then
  alias open='xdg-open &>/dev/null'
fi

# ================================
# Text Search Utilities
# ================================

if command_exists rg; then
  alias find_text='find_text_rg'
else
  alias find_text='find_text_grep'
fi

find_text_rg() (
  set -x
  rg --with-filename \
    --ignore-case \
    --line-number \
    --color=always \
    "$1" "${2:-.}" | less --raw-control-chars
  if [[ $? -ne 0 ]]; then
    echo "No matches found for '$1' in '${2:-.}' or an error occurred." >&2
  fi
)

find_text_grep() (
  set -x
  grep -H \
    --ignore-case \
    --binary-files=without-match \
    --line-number \
    --color=always \
    --recursive \
    "$1" "${2:-.}" | less --raw-control-chars
  if [[ $? -ne 0 ]]; then
    echo "No matches found for '$1' in '${2:-.}' or an error occurred." >&2
  fi
)

# ================================
# Git Aliases
# ================================

alias ga='   git add'
alias gaa='  git add --all'
alias gb='   git branch'
alias gba='  git branch --all'
alias gc='   git commit --verbose'
alias gc!='  git commit --verbose --amend'
alias gcn!=' git commit --verbose --no-edit --amend'
alias gc0='  git commit --allow-empty -m "empty commit"'
alias gco='  git checkout'
alias gd='   git diff'
alias gdca=' git diff --cached'
alias gf='   git fetch'
alias glog=' git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
alias gp='   git push'
alias gpf='  git push --force-with-lease --force-if-includes'
alias gpf!=' git push --force'

# ================================
# Archiving and Extraction
# ================================

mktar() (
  set -x
  tar cvf "$1".tar "$@"
)

mkgz() (
  set -x
  tar cvzf "$1".tar.gz "$@"
)

mkbz2() (
  set -x
  tar cvjf "$1".tar.bz2 "$@"
)

mkgpg() (
  set -x
  local archive="$1.tar.gz"
  tar cvzf "$archive" "$@"
  gpg --symmetric --cipher-algo aes256 "$archive"
)

extract() (
  set -x
  case "$1" in
  *.tar.bz2) tar xvjf "$1" ;;
  *.tar.gz) tar xvzf "$1" ;;
  *.bz2) bunzip2 "$1" ;;
  *.rar) unrar x "$1" ;;
  *.gz) gunzip "$1" ;;
  *.tar) tar xvf "$1" ;;
  *.tbz2) tar xvjf "$1" ;;
  *.tgz) tar xvzf "$1" ;;
  *.zip) unzip "$1" ;;
  *.ZIP) unzip "$1" ;;
  *.pax) pax -r <"$1" ;;
  *.pax.Z) uncompress -c "$1" | pax -r ;;
  *.Z) uncompress "$1" ;;
  *.7z) 7z x "$1" ;;
  *.tar.gz.gpg) gpg --decrypt "$1" | tar xvzf - ;;
  *.gpg) gpg --output "${1%.*}" --decrypt "$1" ;;
  *)
    echo "extract() doesn't know how to extract '$1'"
    return 1
    ;;
  esac
)

# ================================
# fzf Integration
# ================================

if command_exists fzf; then
  fzfopen() {
    find "${1:-.}" -type d -maxdepth 5 ! -path "*git*" | fzf --preview='ls -al {}' --bind 'enter:become(open {})'
  }

  fzfedit() {
    find "${1:-.}" -type f -maxdepth 5 ! -path "*git*" | fzf --preview='cat {}' --bind 'enter:become($EDITOR {})'
  }
fi

# ================================
# Caps Lock Configuration
# ================================

alias caps="capslock"
alias nocaps="capslock off"

capslock() {
  if [[ "$(uname)" = "Darwin" ]]; then
    echo "capslock() does not support 'Darwin'"
    return 1
  fi

  if [[ -z "$1" ]]; then
    # use capslock as capslock
    setxkbmap -option
  else
    # use capslock as another ctrl
    setxkbmap -option ctrl:nocaps
  fi

  setxkbmap -print -verbose 10
}

# ================================
# Miscellaneous Utilities
# ================================

alias timestamp='date "+%Y%m%d%H%M%S"'
alias 2desk='tee ${HOME}/Desktop/terminal-output-$(timestamp).txt'
alias serve='npx serve || python3 -m http.server'

# Create a README.md if it doesn't exist
mkreadme() {
  [[ -f README.md ]] && {
    echo "README.md already exists"
    return 1
  }
  echo 'Nothing interesting here yet. Try again later.' >README.md
}

# Ruby
alias be='bundle exec'

install_bundler() {
  if [[ -z "$1" ]]; then
    echo "Installing default bundler..."
    gem install bundler
  else
    echo "Installing bundler version $1..."
    gem uninstall -xI bundler && gem install bundler --version "$1"
  fi
}

# Elixir
# https://hexdocs.pm/hex/Mix.Tasks.Hex.Docs.html
hexdocs() { mix hex.docs online "${1:-elixir}"; }

hexpm() { open "https://hex.pm/packages?search=${1:-}"; }

# PHP
alias sail='sh $([ -f sail ] && echo sail || echo vendor/bin/sail)'

# Neovim
alias nv='nvim'
alias nvi='nvim'
alias nv.='nvim .'
alias nv,='nvim ~/.config/nvim/'
