#!/usr/bin/env bash

# Rofi GitHub Repository Menu
#
# This script allows users to quickly access GitHub repositories managed locally.
# It lists repositories and provides direct actions:
# - Open a repository on GitHub in a web browser.
# - Open the local repository directory in a file explorer.

# --------------------------------------------------
# Configuration
# --------------------------------------------------

CACHE_DIR="/tmp/$USER/rofi-git-repos"
REPO_LIST_FILE="$CACHE_DIR/repo_list.txt"    # Stores repository names
REPO_PATH_MAP_FILE="$CACHE_DIR/repo_map.txt" # Maps repository names to local paths
MENU_CLEAR_CACHE="Clear cache"

# Ensure cache directory exists
if [ ! -d "$CACHE_DIR" ]; then
  mkdir -p "$CACHE_DIR"
fi

# --------------------------------------------------
# Repository Scanning & Caching
# --------------------------------------------------

# Scans for Git repositories and caches their names and local paths.
# This function locates all `.git/config` files and extracts:
# - Repository name (from GitHub remote URL)
# - Local repository path (derived from `.git/config` location)
update_repo_cache() {
  >"$REPO_LIST_FILE"     # Clear previous repository list
  >"$REPO_PATH_MAP_FILE" # Clear previous path mappings

  locate .git/config 2>/dev/null | while IFS= read -r git_config_path; do
    if [[ -f "$git_config_path" ]]; then
      repo_root_dir=$(dirname "$(dirname "$git_config_path")") # Move two levels up to get the repository root
      repo_name=$(grep -hoP 'github\.com[:/]\K[^ ]+' "$git_config_path" | awk -F'.git' '{print $1}')
      # Exclude unwanted directories
      if [[ -z "$repo_name" ]] ||
        [[ "$repo_root_dir" == *"/Trash/"* ]] ||
        [[ "$repo_root_dir" == *"/.local/share/nvim/"* ]] ||
        [[ "$repo_root_dir" == *"/.vim/"* ]] ||
        [[ "$repo_root_dir" == *"/.asdf/plugins/"* ]] ||
        [[ "$repo_root_dir" == *"/.local/share/asdf/plugins/"* ]] ||
        [[ "$repo_root_dir" == *"/.local/share/nvim/lazy/"* ]]; then
        continue
      fi

      echo "$repo_name" >>"$REPO_LIST_FILE"
      echo "$repo_name $repo_root_dir" >>"$REPO_PATH_MAP_FILE"
    fi
  done

  sort -u "$REPO_LIST_FILE" -o "$REPO_LIST_FILE"
  sort -u "$REPO_PATH_MAP_FILE" -o "$REPO_PATH_MAP_FILE"
}

# Retrieves the local path of a given repository name from the cache.
get_local_repo_path() {
  grep -m 1 "^$1 " "$REPO_PATH_MAP_FILE" | awk '{print $2}'
}

# --------------------------------------------------
# Menu Generation
# --------------------------------------------------

# Generates the list of selectable menu options for Rofi.
# - If no cached repository list exists, it triggers a scan.
# - Each repository is displayed with two actions:
#   - "Open in browser"
#   - "Open in file explorer"
generate_menu_options() {
  # If cache files are missing or empty, regenerate the repository list
  if [ ! -s "$REPO_LIST_FILE" ] || [ ! -s "$REPO_PATH_MAP_FILE" ]; then
    update_repo_cache
  fi

  echo -en "\x00prompt\x1fgit\n"

  # If cache is still empty after scanning, show an error message in Rofi
  if [ ! -s "$REPO_LIST_FILE" ]; then
    echo "No repositories found."
    echo "$MENU_CLEAR_CACHE"
    exit 0
  fi

  while IFS= read -r repo_name; do
    echo -e "$repo_name - Open in browser\x00info\x1fopen_browser:$repo_name"
    echo -e "$repo_name - Open in file explorer\x00info\x1fopen_explorer:$repo_name"
  done <"$REPO_LIST_FILE"

  echo "$MENU_CLEAR_CACHE"
}

# --------------------------------------------------
# Main Execution Logic
# --------------------------------------------------

# Debugging output
echo "Debug: Script called with args: $*" >&2
echo "Debug: ROFI_INFO=${ROFI_INFO:-<empty>}" >&2

# If no argument is provided, display the menu
if [[ -z "$1" ]]; then
  generate_menu_options
  exit 0
fi

# Handle cache clearing request
if [[ "$1" == "$MENU_CLEAR_CACHE" ]]; then
  rm -f "$REPO_LIST_FILE" "$REPO_PATH_MAP_FILE"
  notify-send "GitHub Repo Cache Cleared!" # Notify user
  exit 1
fi

# Parse action and repository name from Rofi selection
action="${ROFI_INFO%%:*}"   # Extract action (open_browser, open_explorer)
repo_name="${ROFI_INFO#*:}" # Extract repository name

# Retrieve local repository path from cache
repo_local_path=$(get_local_repo_path "$repo_name")

# Perform selected action
if [[ "$action" == "open_browser" ]]; then
  if command -v xdg-open >/dev/null; then
    xdg-open "https://github.com/$repo_name" >/dev/null 2>&1 &
  else
    notify-send "Error: xdg-open not found"
  fi
elif [[ "$action" == "open_explorer" ]]; then
  if [[ -d "$repo_local_path" ]]; then
    # Open the local repository folder in the file explorer
    # - `nohup`: Prevents the process from being terminated if the parent shell exits.
    # - `&`: Runs the process in the background so Rofi can close immediately.
    # - `disown`: Removes the job from the shell's job table to fully detach it.
    nohup xdg-open "$repo_local_path" >/dev/null 2>&1 &
    disown
  else
    notify-send "Error: Local path not found for $repo_name"
  fi
else
  notify-send "Error: Invalid selection"
  exit 1
fi

exit 0
